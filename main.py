import json
import os
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.client.default import DefaultBotProperties
from recommendations import RecommendationEngine
import asyncio
import pars
from product_search import get_product_link
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup


####################
class AuthStates(StatesGroup):
    waiting_for_phone = State()
    waiting_for_code = State()
######################


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token="8027678125:AAGJUE9QJW8KNYUkl_8BDWah9ngJr9zVkmQ",
          default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏

###############################################################


@dp.message(lambda message: message.text == "üîÑ –°–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
async def handle_parse(message: types.Message, state: FSMContext):
    await message.answer(
        "–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –Ω–∞–º –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–∏–º –ø–æ–∫—É–ø–∫–∞–º –Ω–∞ Wildberries.\n\n"
        "1. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ Wildberries (–≤ —Ñ–æ—Ä–º–∞—Ç–µ 79991234567)\n"
        "2. –í–∞–º –ø—Ä–∏–¥–µ—Ç SMS —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è - –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤ –±–æ—Ç\n"
        "3. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ /pars –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö\n\n"
        "‚ùóÔ∏è–ë–æ—Ç –Ω–µ —Ö—Ä–∞–Ω–∏—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ–±–∏—Ä–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫—É–ø–æ–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è."
    )
    await state.set_state(AuthStates.waiting_for_phone)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞


@dp.message(AuthStates.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    phone = message.text.strip()
    if not phone.isdigit() or len(phone) != 11:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –í–≤–µ–¥–∏—Ç–µ 11 —Ü–∏—Ñ—Ä –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 79991234567)")
        return

    try:
        await state.update_data(phone=phone)
        await message.answer(f"üîë –ù–æ–º–µ—Ä {phone} –ø—Ä–∏–Ω—è—Ç. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑ SMS:")
        await state.set_state(AuthStates.waiting_for_code)

        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        asyncio.create_task(start_wb_auth(message.from_user.id, phone))
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è


@dp.message(AuthStates.waiting_for_code)
async def process_code(message: types.Message, state: FSMContext):
    code = message.text.strip()
    if not code.isdigit() or len(code) != 6:
        await message.answer("‚ùå –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 6 —Ü–∏—Ñ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    try:
        user_data = await state.get_data()
        phone = user_data.get('phone')
        user_id = message.from_user.id

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø–∞—Ä—Å–µ—Ä–µ
        await state.update_data(auth_code=code)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer(
            "‚úÖ –ö–æ–¥ –ø—Ä–∏–Ω—è—Ç! –ò–¥–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ Wildberries...\n\n"
            "–ö–∞–∫ —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. "
            "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ /pars –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞—à–∏—Ö –ø–æ–∫—É–ø–∫–∞—Ö."
        )

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        asyncio.create_task(complete_wb_auth(user_id, phone, code))

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–¥–∞: {str(e)}")
    finally:
        await state.clear()


async def start_wb_auth(user_id: int, phone: str):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ Wildberries"""
    try:
        # –ó–¥–µ—Å—å –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ pars.py –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        # success = pars.start_phone_auth(phone) –î–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥—Ä–∞–π–≤–µ—Ä–∞
        success = pars.start_phone_auth(user_id, phone)
        if not success:
            await bot.send_message(user_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    except Exception as e:
        await bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")


async def complete_wb_auth(user_id: int, phone: str, code: str):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ Wildberries —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    try:
        success = pars.complete_phone_auth(user_id, phone, code)
        # success = pars.complete_phone_auth(phone, code)
        if success:
            await bot.send_message(user_id, "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å /pars –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö.")
        else:
            await bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        await bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∫–æ–¥–∞: {str(e)}")

######################################################################


def get_main_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="üîÑ –°–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"))
    builder.add(types.KeyboardButton(text="üåü –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)


# –ö–æ–º–∞–Ω–¥–∞ /start


@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer(
        "üëã <b>–ü—Ä–∏–≤–µ—Ç!</b>\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —É–º–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ Wildberries. "
        "–û–Ω –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–≤–æ–∏ –ø–æ–∫—É–ø–∫–∏ –∏ —Å–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å, –∫–æ—Ç–æ—Ä–∞—è —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ç–≤–æ–∏–º –ª–∏—á–Ω—ã–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º.\n\n"
        "–≠—Ç–æ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞, –∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –º–µ–¥–ª–µ–Ω–Ω–æ. –ü—Ä–æ—è–≤–∏ —Ç–µ—Ä–ø–µ–Ω–∏—è –∏ –¥–æ–∂–¥–∏—Å—å –æ—Ç–≤–µ—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –æ–Ω–∏ —Ç–æ—á–Ω–æ –ø—Ä–∏–¥—É—Ç.\n\n"
        "–î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–≤–µ—Ä—à–∏–ª –±–æ–ª—å—à–µ 50 –ø–æ–∫—É–ø–æ–∫ –Ω–∞ Wildberries, –¥–æ—Å—Ç—É–ø–Ω–æ —Å–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏, –∫–æ—Ç–æ—Ä–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç —Ç–æ–≤–∞—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ–ª—å–∫–æ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π. –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—â–µ –Ω–µ –Ω–∞–±—Ä–∞–ª–æ—Å—å 50 –ø–æ–∫—É–ø–æ–∫ ‚Äî –Ω–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è, —Ç–µ–±–µ —Ç–æ–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã —É–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏.\n"
        "–°–æ–≤–µ—Ä—à–∞–π—Ç–µ –ø–æ–∫—É–ø–∫–∏, –æ–±–Ω–æ–≤–ª—è–π—Ç–µ —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö, —Ç–∞–∫ –º–æ–¥–µ–ª—å –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –∑–Ω–∞—Ç—å, —á—Ç–æ –≤–∞–º —Å–µ–≥–æ–¥–Ω—è —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å.\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–°–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ¬ª.\n\n"
        "üöÄ <b>–ù–∞—á–Ω–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</b>",
        reply_markup=get_main_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ" –ë–µ–∑ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞

"""
@dp.message(lambda message: message.text == "üîÑ –°–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
async def handle_parse(message: types.Message):
    await message.answer(
        "–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤–∞—Å –Ω–∞–º –Ω—É–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–∫—É–ø–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —É–∂–µ —Å–æ–≤–µ—Ä—à–∞–ª–∏.\n\n"
        "1. –ù–∞–∂–º–∏—Ç–µ /open - –Ω–∞ –≤–∞—à–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è Wildberries\n"
        "2. –í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç\n"
        "3. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ /pars\n\n"
        "–ò–∑—É—á–µ–Ω–∏–µ –≤–∞—à–∏—Ö –ø–æ–∫—É–ø–æ–∫ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è, –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä.\n"
        "–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."
    )
    
"""

# –ö–æ–º–∞–Ω–¥–∞ /open - –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç Wildberries


@dp.message(Command("open"))
async def open_wildberries(message: types.Message):
    try:
        if pars.open_browser():
            await message.answer(
                "üåê –ë—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞:\n"
                "1. –í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç Wildberries\n"
                "2. –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã\n"
                "3. –ó–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ /pars –≤ –±–æ—Ç–µ"
            )
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@dp.message(Command("pars"))
async def parse_user_data(message: types.Message):
    user_id = message.from_user.id
    await message.answer("üîç –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö –ø–æ–∫—É–ø–æ–∫... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.")

    try:
        csv_path = pars.pars_data(user_id)
        if csv_path:
            await message.answer(
                "‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω—ã!\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É 'üåü –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏'."
            )
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    except Exception as e:
        error_msg = (
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö:\n"
            f"{str(e)}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            "1. –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å\n"
            "2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –∑–∞–∫–∞–∑—ã –≤ –∞—Ä—Ö–∏–≤–µ\n"
            "3. –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 2-3 –º–∏–Ω—É—Ç—ã"
        )
        await message.answer(error_msg)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"


@dp.message(lambda message: message.text == "üåü –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
async def handle_recommendations(message: types.Message):
    user_id = message.from_user.id
    csv_path = f"data/user_data/{user_id}.csv"

    if not os.path.exists(csv_path):
        await message.answer("‚ùå –§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–µ—Ä–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ.")
        return

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        engine = RecommendationEngine()
        result = engine.get_recommendations(str(user_id))

        if result['status'] == 'error':
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {result['message']}")
            return

        # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ –¥–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω–µ–∏–∑–º–µ–Ω–Ω–æ–º –≤–∏–¥–µ
        model_type_message = (
            f"üîÆ <b>–°–µ–π—á–∞—Å –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è:</b> {result['model_type']} –º–æ–¥–µ–ª—å\n\n"
            f"üìÖ –î–∞—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {result['date']}"
        )
        await message.answer(model_type_message, parse_mode="HTML")

        categories = [rec['category'] for rec in result['recommendations']]
        categories_message = (
            "üõçÔ∏è <b>–°–µ–≥–æ–¥–Ω—è —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∞–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:</b>\n"
            f"‚Ä¢ {categories[0]}\n"
            f"‚Ä¢ {categories[1]}"
        )
        await message.answer(categories_message, parse_mode="HTML")

        # 2. –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–±–æ—Ä–µ —Ç–æ–≤–∞—Ä–æ–≤
        await message.answer("üîé <b>–ü–æ–¥–±–∏—Ä–∞–µ–º –¥–ª—è –≤–∞—Å —Ç–æ–≤–∞—Ä—ã...</b>", parse_mode="HTML")

        # 3. –ü–æ–ª—É—á–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º –ø–æ –æ–¥–Ω–æ–º—É
        all_subcategories = []
        for rec in result['recommendations']:
            for sub in rec['subcategories']:
                all_subcategories.append((rec['category'], sub['name']))

        for i, (category, subcategory) in enumerate(all_subcategories[:6], 1):
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            search_query = f"{category} {subcategory}"

            # –ò—â–µ–º —Ç–æ–≤–∞—Ä
            product_link = get_product_link(search_query)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–∑—É
            if product_link and product_link != "–û—à–∏–±–∫–∞":
                await message.answer(
                    f"<b>{category}, {subcategory}</b>\n"
                    f"<a href='{product_link}'>–°–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä</a>",
                    parse_mode="HTML",
                    disable_web_page_preview=False
                )
            else:
                await message.answer(
                    f"<b>{category}, {subcategory}</b>\n"
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä",
                    parse_mode="HTML"
                )

            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            await asyncio.sleep(1)

        # 4. –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(
            "üéâ <b>–ù–∞ —Å–µ–≥–æ–¥–Ω—è —ç—Ç–æ –≤—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏!</b>\n\n"
            "–í–∞—à –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ —Å–æ–≤–µ—Ç—É–µ—Ç –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —ç—Ç–∏ —Ç–æ–≤–∞—Ä—ã. "
            "–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –ø—Ä–æ—Å—Ç–æ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –∏—Ö —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞


async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
